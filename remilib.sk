function effect(target: player, p: potion effect type, tier: number=0, time: time span=0 tick):
		add potion effect of {_p} of tier {_tier} without particles for {_time} to potion effects of {_target}
command /skr <text=yumikoku.sk>:
	permission: player
	trigger:
		player command "/sk reload %arg%"

function teams(p: player) :: players:
	if team of {_p} is not set:
		return {_p}
	add (all players where [player input != {_p}]) where [team of player input = team of {_p}] to {_e::*}
	return {_e::*}
function enemys(p: player) :: players:
	if team of {_p} is not set:
		return {_p}
	set {_t} to team of {_p}
	loop all players:
		team of loop-player is not {_t}
		add loop-player to {_e::*}
	return {_e::*}
command /send <player> <text>:
	permission: op
	trigger:
		send arg-1 to server arg-2
function syncscore():
	set {_o} to objective with id "info"
	set score of "$mode" for {_o} to {mode}

on shoot:
	{game} is true
	shooter is player
	add 1 to {remi::shoot::%shooter%}

on damage of player:
	attacker is not victim
	attacker is player
	if damage type of damage source = arrow:
		{game} is true
		add 1 to {remi::hit::%attacker%}
command /info <offline player>:
	trigger:
		send "&cHIT:&7%{remi::hit::%arg%}% &cSHOT:&7%{remi::shoot::%arg%}% &ch/s &7%{remi::hit::%arg%}/{remi::shoot::%arg%}%" to player
		send "&cKILL:&7%{remi::kill::%arg%}% &cDEATH:&7%{remi::death::%arg%}% &ck/d &7%{remi::kill::%arg%}/{remi::death::%arg%}%"
		send "&7試合に勝利した回数: &c%{remi::wins::%arg%}%"
		send "&7試合に参加した回数: &c%{remi::game::%arg%}%"
		send "&7合計参加時間(死亡後込み): &c%{remi::playtime::%arg%}%%nl%&7合計生存時間: &c%{remi::alivetime::%arg%}%"
		send "&7平均生存時間: &c%{remi::alivetime::%arg%}/{remi::game::%arg%}%"
command /leaderbord <text>:
	trigger:
		loop indices of {remi::%arg%::*}:
			send "#%loop-counter% %offlineplayer(loop-value)%: %{remi::%arg%::%loop-value%}%"
on death:
	{game} is true
	victim is player
	add 1 to {remi::death::%victim%} 
	add 1 to {remi::kill::%attacker%} if attacker is player
on command "/start":
	loop all players:
		add 1 to {remi::game::%loop-player%}
		add loop-player to {_a::*}
	wait 2 tick
	do while {game} is true:
		wait second
		loop {_a::*}:
			add 1 to {remi::playtime::%loop-value%}
			gamemode of loop-value is adventure
			add 1 to {remi::alivetime::%loop-value%}

on command "/wipe-data":
	clear {remi::*}
load:
	set {r} to 255
	set {g} to 0
	set {b} to 0
function rainbowText(text: string) :: text:
	set {_result} to ""
	loop split {_text} by "":
		set {_t} to text component from loop-value
		set color format of {_t} to rgb({r}, {g}, {b})
		add {_t} to {_result::*}
		wait tick
	set {_result} to "%{r}% %{g}% %{b}%"
	set {fb::*} to {_result::*}

every tick:
	if abs({r})*-1 is {r}:
		set {r} to 0	
	if abs({g})*-1 is {g}:
		set {g} to 0
	if abs({b})*-1 is {b}:
		set {b} to 0
	if {b} is 0:
		if {g} is 255:
			add -1 to {r}
		else if {r} is 255:
			add 1 to {g}
		else if {g} is not 255:
			add 1 to {r}
	if {r} is 0:
		if {b} is 255:
			add -1 to {g}
		else if {g} is 255:
			add 1 to {b}
		else if {b} is not 255:
			add 1 to {g}
	if {g} is 0:
		if {r} is 255:
			add -1 to {b}
		else if {b} is 255:
			add 1 to {r}
		else if {r} is not 255:
			add 1 to {b}
on player move:
	player's y coord >= 176
	force teleport player 175-player's y coord meter upward player
on jump:
	player's y coord >= 175
	force teleport player 175-player's y coord meter upward player
command /skull <Offline Player>:
	permission: op
	trigger:
		give arg's skull to player

function ray(a: location, b: location, step: number=0.5) :: locations:
    set {_ax} to x-coordinate of {_a}
    set {_ay} to y-coordinate of {_a}
    set {_az} to z-coordinate of {_a}
    set {_bx} to x-coordinate of {_b}
    set {_by} to y-coordinate of {_b}
    set {_bz} to z-coordinate of {_b}
    set {_dx} to {_bx} - {_ax}
    set {_dy} to {_by} - {_ay}
    set {_dz} to {_bz} - {_az}
    set {_len} to sqrt({_dx}^2 + {_dy}^2 + {_dz}^2)
    set {_steps} to floor({_len} / {_step})
    set {_locs::*} to {_a}
    loop {_steps} times:
        set {_t} to loop-number / {_steps}
        set {_x} to {_ax} + {_dx} * {_t}
        set {_y} to {_ay} + {_dy} * {_t}
        set {_z} to {_az} + {_dz} * {_t}
        add location at {_x}, {_y}, {_z} in world of {_a} to {_locs::*}
    return {_locs::*}